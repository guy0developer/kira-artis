// functions/api/tufe/latest.ts
// Edge'de çalışır. TCMB sayfasını doğrudan çekip (CORS yok) HTML'den
// "TÜFE (Aylık % Değişim)" değerini parse eder. TCMB başarısızsa
// DBnomics (OECD) serisini fallback kullanır.
//
// Yanıt JSON: { period: "MM-YYYY", monthly_pct: number, yoy_pct?: number, source: string }
//
// Cache: 6 saat (edge). CORS: * (istiyorsan daraltabilirsin).

export const onRequestGet: PagesFunction = async (context) => {
  const { request } = context;

  const cache = caches.default;
  const cacheKey = new Request(new URL(request.url).origin + "/__tufe_latest_v1");
  const cached = await cache.match(cacheKey);
  if (cached) return cached;

  // 1) Önce TCMB (otorite ve hızlı)
  try {
    const data = await fetchFromTCMB();
    if (data) {
      const res = jsonResponse(data);
      // yanıtı edge cache'e yaz (background)
      context.waitUntil(cache.put(cacheKey, res.clone()));
      return res;
    }
  } catch (_) { /* fallback */ }

  // 2) Fallback: DBnomics (OECD CPALTT01.TUR.GP.M = Aylık, bir önceki döneme göre değişim)
  try {
    const data = await fetchFromDBnomics();
    if (data) {
      const res = jsonResponse(data);
      context.waitUntil(cache.put(cacheKey, res.clone()));
      return res;
    }
  } catch (_) { /* fall through */ }

  // 3) Olmadıysa 502
  return jsonResponse({ error: "unavailable" }, 502);
};

// --- Helpers ---

function jsonResponse(body: any, status = 200): Response {
  return new Response(JSON.stringify(body), {
    status,
    headers: {
      "content-type": "application/json; charset=utf-8",
      "cache-control": "public, max-age=21600", // 6 saat
      "access-control-allow-origin": "*"
    }
  });
}

async function fetchFromTCMB() {
  // TCMB Tüketici Fiyatları tablosu (TÜFE Yıllık %, TÜFE Aylık %). :contentReference[oaicite:2]{index=2}
  const url = "https://www.tcmb.gov.tr/wps/wcm/connect/TR/TCMB%2BTR/Main%2BMenu/Istatistikler/Enflasyon%2BVerileri/Tuketici%2BFiyatlari";

  const r = await fetch(url, {
    // Kaynak tarafında da CDN cache kullanalım
    cf: { cacheTtl: 21600, cacheEverything: true }
  });
  if (!r.ok) return null;

  const html = await r.text();

  // 1) HTML tablosunda genellikle şöyle bir satır var:
  // 07-2025  33.52  2.06   (Dönem | Yıllık% | Aylık%)
  // Önce <td> yapısına özgü, sonra genel eşleşme:
  let m =
    html.match(
      /(\d{2}-\d{4})\s*<\/td>\s*<td[^>]*>\s*([\d.,-]+)\s*<\/td>\s*<td[^>]*>\s*([\d.,-]+)\s*<\/td>/i
    ) ||
    html.match(/(\d{2}-\d{4})[\s\S]*?(\d{1,3}[.,]\d{1,2})[\s\S]*?(\d{1,3}[.,]\d{1,2})/i);

  if (!m) return null;

  const period = m[1];
  const yoy = toNumber(m[2]);
  const monthly = toNumber(m[3]);

  if (monthly == null) return null;

  return {
    period,
    monthly_pct: monthly,
    ...(yoy != null ? { yoy_pct: yoy } : {}),
    source: "TCMB Tüketici Fiyatları"
  };
}

async function fetchFromDBnomics() {
  // OECD/KEI CPALTT01.TUR.GP.M = Consumer prices: all items – Growth previous period – Monthly
  // DBnomics REST v22 (CORS açık). Örnek seri sayfası ve koleksiyon: :contentReference[oaicite:3]{index=3}
  const url =
    "https://api.db.nomics.world/v22/series/OECD/KEI/CPALTT01.TUR.GP.M?format=json";
  const r = await fetch(url, {
    headers: { Accept: "application/json" },
    cf: { cacheTtl: 21600, cacheEverything: true }
  });
  if (!r.ok) return null;

  const j = await r.json() as any;

  // DBnomics şeması farklı şekillerde dönebiliyor; aşağıdaki iki yolun birinden yakala:
  let period: string | undefined;
  let value: number | undefined;

  const d = j?.series?.docs?.[0];
  if (d?.period?.length && d?.value?.length) {
    period = String(d.period[d.period.length - 1]);
    value = toNumber(d.value[d.value.length - 1]);
  } else if (Array.isArray(j?.series?.period) && Array.isArray(j?.series?.value)) {
    const pArr = j.series.period, vArr = j.series.value;
    period = String(pArr[pArr.length - 1]);
    value = toNumber(vArr[vArr.length - 1]);
  }

  if (value == null) return null;

  return {
    period,
    monthly_pct: value,
    source: "OECD / DBnomics (CPALTT01.TUR.GP.M)"
  };
}

function toNumber(x: any): number | null {
  if (x == null) return null;
  const n = Number(String(x).replace(",", ".").trim());
  return Number.isFinite(n) ? n : null;
}
